import pandas as pd
import requests
from concurrent import futures
from press.coronary import case_list_mapping
from pandas import DataFrame
import os
import shutil


"""
算法79私有测试，
重跑加插队
多线程实现
"""

_host = 'platform.democompany.net'
fail_list = []
try:
    token = requests.post(f"http://coronary.{_host}/api/usr/tokens",
                            json={"username": "jinjie2",
                            "password": "8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92"},
                            headers={"content-type": "application/json"}).json()['token']
except Exception as e:
    print("you should bind host")
    raise

auth = {'Authorization': 'Bearer ' + token}


def update_case_num():
    # case 79与uat的mapping,放入csv
    data = pd.read_excel(io='/Users/jinjie/日常/冠脉算法/0.99.5.cd0e6541冠脉算法各项合格率统计文档.xlsx',
                         sheet_name='结果记录表')
    print(data['caseNum'])
    for case in case_list_mapping:
        for d in range(len(data['caseNum'])):
            if not isinstance(data['caseNum'][d], str):
                continue
            if data['caseNum'][d] == case[1]:
                data['caseNum'][d] = f'{case[1]}, {case[0]}'
    DataFrame(data).to_excel('/Users/jinjie/日常/冠脉算法/0.99.5.cd0e6541冠脉算法各项合格率统计文档.xlsx',
                             sheet_name='结果记录表', index=False, header=True)


def get_csv_case():
    data = pd.read_excel(io='/Users/jinjie/日常/冠脉算法/0.99.5.cd0e6541冠脉算法各项合格率统计文档.xlsx',
                         sheet_name='结果记录表',
                         usecols='B')
    return [d[0] for d in data.values.tolist() if type(d[0]) == str]


def redo_case_with_shift():
    for case_num in get_csv_case():
        try:
            redo_func(case_num)
        except Exception as e:
            print(e)
            fail_list.append(case_num)


def redo_func(case_num):
    rev = requests.get(f"http://coronary.{_host}/api/coronary/cases/series/{case_num}",
                       headers=auth)
    if rev.json()[0].get('state'):
        # redo
        redo_response = requests.post(url=f'http://coronary.{_host}/api/coronary/case/{case_num}/repostprocess',
                                      json={},
                                      headers=auth)
        print(f'redo case {case_num} {redo_response.text}', )
        # 插队
        shift_response = requests.post(url=f'http://coronary.{_host}/api/coronary/case/{case_num}/process',
                                       json={"action": "shift"},
                                       headers=auth)
        print(f'shift case {case_num} {shift_response.text}')


def redo_with_future():
    result = []
    with futures.ThreadPoolExecutor(max_workers=20) as executor:
        for c in get_csv_case():
            f = executor.submit(redo_func, c)
            result.append(f)
        futures.as_completed(result)


def copy_data():
    path = '/data1/data/original'
    new_path = '/data1/data/57'
    study_id = ['1.2.840.113820.666.813162.20190703130000.1.77.305',
                '1.2.840.113619.186.808619013548.20190703081035668.495',
                '1.2.826.0.1.3680043.6.16210.30853.20190603101430.172.669',
                '1.2.840.113564.118796721496052.44976.636972421944143845.1596',
                '1.2.840.113564.118796721496052.44976.636971580900958630.360',
                '1.2.840.113619.2.416.50709587147942575165457604073004848503',
                '1.2.840.113619.186.21217482123183196.20190826113829975.211',
                '1.2.840.113619.186.80861769062.20190827104708430.828',
                '1.2.826.0.1.3680043.6.18012.29748.20190709073533.736.17',
                '1.2.840.40823.1.1.1.33.1561853841.587.552.399',
                '1.2.392.200036.9125.2.138612190166.20110508000138.20190902001574',
                '1.2.840.40823.1.1.1.12.1561958364.449.780.824',
                '1.3.12.2.1107.5.1.4.73703.30000019082606220129900000005',
                '1.2.124.113532.12.10681.48678.20190629.112236.767791214',
                '1.2.392.200036.9116.2.5.1.48.1221404953.1566802615.69831',
                '1.2.840.113820.666.1201558.20190703140036.3.274.340',
                '1.2.392.200036.9116.2.5.1.48.1221404953.1561962426.591482',
                '1.2.840.113619.2.416.226468283105710682952021565847696610270',
                '1.2.840.113619.2.416.171977235279728880543410034116287819994',
                '1.2.840.113619.2.416.147962159019455037473133146690242675559',
                '1.2.840.113564.345051450607.54356.636981752415384861.495',
                '1.2.840.113619.2.416.155919640752309406072157669605680363915',
                '1.2.840.113619.2.416.307288453546355929360552268187514059147',
                '1.2.840.113619.2.55.31909180094',
                '1.2.840.113619.2.416.191109866073469171219283844354631459846',
                '1.2.826.0.1.8296274.2208479.20190703162051921.3',
                '1.2.826.0.1.3680043.6.32655.56198.20190715160710.745.22',
                '1.2.840.113820.666.2665030.20190708103034.3.77.732',
                '1.2.410.200010.1120027.5391.2519958.3015795.167975252.3015795',
                '1.2.840.113554.345050450095.30344.637041306258569953.14',
                '1.2.840.113619.186.808617090127.20190923110106544.466',
                '1.2.410.200010.1141047.2838.2489932.2985615.16646311150.2985615',
                '1.2.86.76547135.7.1380514.20190924093941',
                '1.2.410.200010.1103557.7044.5237300.5376817.82041831.5376817',
                '1.3.46.670589.33.1.63697767350874117100001.5474572036455732447',
                '1.2.840.113554.345050450095.30620.637043272408760908.1544',
                '1.2.840.113619.186.808617090127.20190828093932649.520',
                '1.2.840.113619.186.808617090127.20190814141030751.687',
                '1.2.840.113564.345052301622.2556.637033770413636014.989',
                '1.2.410.200010.1093116.9681.2491211.2986898.166711523.2986898',
                '1.3.12.2.1107.5.1.4.74148.30000019090923182404900000134',
                '1.2.840.113619.2.416.227571144803182520331940653352176679903',
                '1.2.410.200010.1080741.7018.5701392.11404891.19080224422',
                '1.2.392.200036.9116.2.5.1.48.1221404953.1566544882.631687',
                '1.2.840.113619.2.311.332048273823862800033011371264211085730',
                '1.2.840.113619.2.416.7027758756180480973534085014678350844',
                '1.2.840.113820.666.1340976.20190622133000.1.617.229',
                '1.2.124.113532.12.10681.48678.20190813.92520.174799146',
                '1.3.46.670589.33.1.63697655229389135000001.5727473734691060605',
                '1.2.840.113619.2.416.213369038575891221737835200904841639959',
                '1.2.840.113619.186.808617090127.20190918112046010.440',
                '1.2.840.113820.666.2757418.20190702140004.3.274.540',
                '1.2.392.200036.9116.2.5.1.37.2417515785.1561421702.988662',
                '1.2.124.113532.80.22194.30607.20190705.165124.1746657532',
                '1.2.840.113619.186.808619013548.20190704092855805.261',
                '1.2.124.113532.80.22194.30607.20190719.150028.2315625462',
                '1.2.410.200010.86.101.5.20190920240']
    for s in study_id:
        print("copy file {}".format(s))
        shutil.copytree(os.path.join(path, s), (os.path.join(new_path, s)))


if __name__ == '__main__':
    print(get_csv_case())
